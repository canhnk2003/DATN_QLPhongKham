let results = []; // Bi·∫øn l∆∞u tr·ªØ to√†n b·ªô danh s√°ch k·∫øt qu·∫£
var bsId;
var tenBN;
var prescriptions = [];
var notes = [];

$(document).ready(async function () {
  await getDoctorId();

  loadResults(); // T·∫£i danh s√°ch k·∫øt qu·∫£ khi trang ƒë∆∞·ª£c load

  // S·ª± ki·ªán ch·ªânh s·ª≠a k·∫øt qu·∫£ kh√°m
  $(document).on("click", ".m-edit", async function () {
    const resultId = $(this).data("resultId");
    const result = results.find((s) => s.ketQuaKhamId === resultId);
    if (!result) {
      showErrorPopup("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ƒë·ªÉ ch·ªânh s·ª≠a.");
      return;
    }
    const lkId = result.lichKhamId;
    // üëâ G·ªçi API ƒë·ªÉ l·∫•y b·ªánh nh√¢n ID t·ª´ l·ªãch kh√°m
    const bnId = await getLichKhamById(lkId);
    // üëâ G·ªçi API ƒë·ªÉ l·∫•y ti·ªÅn s·ª≠ b·ªánh l√Ω t·ª´ b·ªánh nh√¢n ID
    const tienSu = await getBenhNhanById(bnId);

    // ƒê·ªï d·ªØ li·ªáu v√†o modal ch·ªânh s·ª≠a
    const chanDoan = $("#dialog-edit #diagnose");
    const chiDinhThuoc = $("#dialog-edit #prescription");
    const ghiChu = $("#dialog-edit #note");
    const tienSuBenhLy = $("#dialog-edit #medicalHistory");

    tienSuBenhLy.val(tienSu); // ƒê·ªï ti·ªÅn s·ª≠ b·ªánh
    chanDoan.val(result.chanDoan);
    chiDinhThuoc.val("");
    ghiChu.val("");
    const prescriptionStr = result.chiDinhThuoc;
    const noteStr = result.ghiChu;

    //T√°ch prescriptionStr, noteStr v√† g·∫Øn v√†o m·∫£ng
    prescriptions = prescriptionStr.split(",").map((x) => x.trim());
    notes = noteStr.split(";").map((x) => x.trim());
    //ƒêi·ªÅn d·ªØ li·ªáu v√†o table t·ª´ m·∫£ng
    $("#resultTable tbody").empty();

    // Hi·ªÉn th·ªã t·ª´ng d√≤ng l√™n table
    if (prescriptions.length === notes.length) {
      for (let i = 0; i < prescriptions.length; i++) {
        const newRow = `
              <tr>
                <td><input type="checkbox" class="row-check" /></td>
                <td>${i + 1}</td>
                <td>${prescriptions[i]}</td>
                <td>${notes[i] || ""}</td>
              </tr>
            `;
        $("#resultTable tbody").append(newRow);
      }
    }

    // X·ª≠ l√Ω s·ª± ki·ªán s·ª≠a
    $("#btnEdit")
      .off("click")
      .on("click", function () {
        // console.log("ƒêang x·ª≠ l√Ω s·ª≠a...");
        const chanDoanStr = chanDoan.val();
        // C·∫≠p nh·∫≠t l·∫°i m·∫£ng t·ª´ b·∫£ng ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
        prescriptions = [];
        notes = [];

        $("#resultTable tbody tr").each(function () {
          const pres = $(this).find("td:eq(2)").text().trim();
          const note = $(this).find("td:eq(3)").text().trim();
          prescriptions.push(pres);
          notes.push(note);
        });
        // G·ªôp l·∫°i th√†nh chu·ªói m·ªõi
        const chiDinhThuocStr = prescriptions.join(", ");
        const ghiChuStr = notes.join("; ");

        // Ki·ªÉm tra c√°c tr∆∞·ªùng d·ªØ li·ªáu
        if (!chanDoanStr) {
          showErrorPopup(
            "S·ª≠a kh√¥ng th√†nh c√¥ng: Ch·∫©n ƒëo√°n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!"
          );
          return;
        }
        const updatedResult = {
          ketQuaKhamId: resultId,
          lichKhamId: lkId,
          chanDoan: chanDoanStr,
          chiDinhThuoc: chiDinhThuocStr,
          ghiChu: ghiChuStr,
        };
        // console.log(updatedResult);

        axiosJWT
          .put(`/api/Results/${resultId}`, updatedResult)
          .then((response) => {
            console.log("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: ", response.data); // L·∫•y d·ªØ li·ªáu t·ª´ response
            // üëâ G·ªçi c·∫≠p nh·∫≠t b·ªánh nh√¢n
            updatePatient(bnId);
            loadResults(); // T·∫£i l·∫°i danh s√°ch
            $("#dialog-edit").modal("hide"); // ƒê√≥ng modal
          })
          .catch((error) => {
            console.error("L·ªói khi ch·ªânh s·ª≠a k·∫øt qu·∫£:", error);
            // showErrorPopup("S·ª≠a kh√¥ng th√†nh c√¥ng: ƒê√£ x·∫£y ra l·ªói t·ª´ server!");
          });
      });
  });

  //T·∫°o s·ª± ki·ªán khi nh·∫•n n√∫t th√™m, x√≥a ch·ªâ ƒë·ªãnh thu·ªëc v√† ghi ch√∫
  //S·ª± ki·ªán th√™m
  $("#btnAddRow").on("click", function () {
    const prescription = $("#prescription").val().trim();
    const note = $("#note").val().trim();

    if (prescription || note) {
      prescriptions.push(prescription);
      notes.push(note);

      const index = $("#resultTable tbody tr").length + 1; // ƒê·∫øm s·ªë d√≤ng hi·ªán t·∫°i

      const newRow = `
        <tr>
          <td><input type="checkbox" class="row-check" /></td>
          <td>${index}</td>
          <td>${prescription}</td>
          <td>${note}</td>
        </tr>
      `;
      $("#resultTable tbody").append(newRow);

      // Clear input
      $("#prescription").val("");
      $("#note").val("");
    }
  });
  //S·ª± ki·ªán x√≥a
  $("#btnDeleteRow").on("click", function () {
    // Duy·ªát ng∆∞·ª£c ƒë·ªÉ tr√°nh l·ªói index khi splice
    $("#resultTable tbody tr").each(function (index) {
      if ($(this).find(".row-check").is(":checked")) {
        $(this).remove();
      }
    });

    // C·∫≠p nh·∫≠t l·∫°i m·∫£ng prescriptions v√† notes
    prescriptions = [];
    notes = [];
    $("#resultTable tbody tr").each(function () {
      const pres = $(this).find("td:eq(2)").text();
      const note = $(this).find("td:eq(3)").text();
      prescriptions.push(pres);
      notes.push(note);
    });

    // C·∫≠p nh·∫≠t l·∫°i STT
    $("#resultTable tbody tr").each(function (i) {
      $(this)
        .find("td:eq(1)")
        .text(i + 1); // C·ªôt STT
    });
  });
  //T·∫°o s·ª± ki·ªán khi nh·∫•n CheckAll
  $("#checkAll").on("change", function () {
    $(".row-check").prop("checked", this.checked);
  });
  //T·∫°o s·ª± ki·ªán khi nh·∫•n 1 h√†ng th√¨ d·ªØ li·ªáu ƒëi·ªÅn v√†o √¥ input
  $(document).on("click", "#resultTable tbody tr", function () {
    const prescription = $(this).find("td:eq(2)").text();
    const note = $(this).find("td:eq(3)").text();

    $("#prescription").val(prescription);
    $("#note").val(note);
  });
});

// ‚úÖ H√†m async ƒë·ªÉ l·∫•y b·ªánh nh√¢n ID t·ª´ l·ªãch kh√°m
async function getLichKhamById(lichKhamId) {
  try {
    const res = await axiosJWT.get(`/api/v1/Appointments/${lichKhamId}`);
    return res.data.benhNhanId;
  } catch (err) {
    console.error("L·ªói khi l·∫•y th√¥ng tin l·ªãch kh√°m:", err);
    return null;
  }
}

// ‚úÖ H√†m async ƒë·ªÉ l·∫•y ti·ªÅn s·ª≠ b·ªánh l√Ω t·ª´ b·ªánh nh√¢n
async function getBenhNhanById(benhNhanId) {
  try {
    const res = await axiosJWT.get(`/api/Patients/${benhNhanId}`);
    return res.data.tienSuBenhLy;
  } catch (err) {
    console.error("L·ªói khi l·∫•y th√¥ng tin b·ªánh nh√¢n:", err);
    return "";
  }
}

// ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin b·ªánh nh√¢n
function updatePatient(bnId) {
  const patient = {
    benhNhanId: bnId,
    maBenhNhan: "", // N·∫øu c·∫ßn gi·ªØ nguy√™n th√¨ backend gi·ªØ l·∫°i
    hoTen: "", // T∆∞∆°ng t·ª±
    tienSuBenhLy: $("#dialog-edit #medicalHistory").val(),
  };
  axiosJWT
    .put(`/api/Patients/${bnId}`, patient)
    .then((res1) => {
      console.log("D·ªØ li·ªáu b·ªánh nh√¢n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: ", res1.data);
    })
    .catch((err1) => {
      console.error("L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin b·ªánh nh√¢n:", err1);
    });
}

async function getDoctorId() {
  try {
    let userId = localStorage.getItem("userId");
    const response = await axiosJWT.get(`/api/Doctors/getbyuserid/${userId}`);
    bsId = response.data.bacSiId; // L·∫•y gi√° tr·ªã ID b√°c sƒ©
  } catch (error) {
    console.error("L·ªói khi g·ªçi API:", error);
  }
}

async function getTenBenhNhan(lichKhamId) {
  try {
    // G·ªçi API l·∫•y t√™n b·ªánh nh√¢n t·ª´ lichKhamId
    const response = await axiosJWT.get(
      `/api/Results/tenbenhnhan/${lichKhamId}`
    );
    return response.data; // Gi·∫£ s·ª≠ API tr·∫£ v·ªÅ tr·ª±c ti·∫øp t√™n b·ªánh nh√¢n
  } catch (error) {
    console.error("L·ªói khi l·∫•y t√™n b·ªánh nh√¢n:", error);
    return "Kh√¥ng c√≥ t√™n b·ªánh nh√¢n"; // Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
  }
}

// H√†m t·∫£i danh s√°ch d·ªãch v·ª•
function loadResults() {
  axiosJWT
    .get(`/api/Results/doctor/${bsId}`)
    .then((response) => {
      results = response.data;
      // console.log(results);
      $(".preloader").removeClass("d-none");
      $(".preloader").addClass("d-block");
      displayResults(results); // Hi·ªÉn th·ªã danh s√°ch k·∫øt qu·∫£
      $(".preloader").removeClass("d-block");
      $(".preloader").addClass("d-none");
    })
    .catch((error) => {
      console.error("L·ªói khi t·∫£i danh s√°ch k·∫øt qu·∫£:", error);
    });
}

// H√†m hi·ªÉn th·ªã danh s√°ch k·∫øt qu·∫£
async function displayResults(results) {
  const resultTableBody = $("#tblData"); // X√°c ƒë·ªãnh ph·∫ßn tbody c·ªßa b·∫£ng
  resultTableBody.empty(); // X√≥a n·ªôi dung c≈© tr∆∞·ªõc khi th√™m m·ªõi

  if (results.length === 0) {
    resultTableBody.append(
      '<tr><td colspan="9">Kh√¥ng c√≥ k·∫øt qu·∫£ kh√°m n√†o.</td></tr>'
    ); // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
    return;
  }

  // L·∫∑p qua danh s√°ch k·∫øt qu·∫£ v√† t·∫°o t·ª´ng d√≤ng
  // L·∫∑p qua danh s√°ch k·∫øt qu·∫£ v√† t·∫°o t·ª´ng d√≤ng
  for (const [index, result] of results.entries()) {
    let tenBenhNhan = "ƒêang t·∫£i..."; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh trong khi ƒë·ª£i API tr·∫£ v·ªÅ

    try {
      tenBenhNhan = await getTenBenhNhan(result.lichKhamId); // G·ªçi API l·∫•y t√™n b·ªánh nh√¢n
    } catch (error) {
      console.error("L·ªói khi l·∫•y t√™n b·ªánh nh√¢n:", error);
    }

    const resultRow = `
            <tr>
                <td style="display: none">${result.ketQuaKhamId}</td>
                <td>${index + 1}</td>
                <td>${tenBenhNhan}</td> <!-- Th√™m c·ªôt t√™n b·ªánh nh√¢n -->
                <td>${formatDate(result.ngayTao)}</td>
                <td>${result.chanDoan || "Kh√¥ng c√≥ ch·∫©n ƒëo√°n"}</td>
                <td>${result.chiDinhThuoc || "Kh√¥ng c√≥ ch·ªâ ƒë·ªãnh thu·ªëc"}</td>
                <td>
                    <div class="m-table-tool">
                        <div class="m-edit m-tool-icon" data-result-id="${
                          result.ketQuaKhamId
                        }" data-bs-toggle="modal" data-bs-target="#dialog-edit">
                            <i class="fas fa-edit text-primary"></i>
                        </div>
                    </div>
                </td>
            </tr>
        `;
    resultTableBody.append(resultRow); // Th√™m d√≤ng v√†o b·∫£ng
  }
}

// H√†m formatDate (gi·∫£ ƒë·ªãnh r·∫±ng b·∫°n c√≥ m·ªôt h√†m n√†y ƒë·ªÉ ƒë·ªãnh d·∫°ng ng√†y th√°ng)
function formatDate(date) {
  if (!date) return "";
  const d = new Date(date);
  return d.toLocaleDateString("vi-VN"); // ƒê·ªãnh d·∫°ng ng√†y theo ki·ªÉu Vi·ªát Nam (dd/mm/yyyy)
}

// H√†m ƒë·ªãnh d·∫°ng ng√†y (n·∫øu ng√†y kh√¥ng null)
function formatDate(dateString) {
  if (!dateString) return "Kh√¥ng c√≥ d·ªØ li·ªáu";
  const date = new Date(dateString);
  return date.toLocaleDateString("vi-VN"); // ƒê·ªãnh d·∫°ng theo ng√†y Vi·ªát Nam
}
